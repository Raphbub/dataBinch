d
d <- n_gram_merge(cotes_names, edit_dist_weights = c(d = 1, i = 0.33, s = 1, t = 1))
d
d <- n_gram_merge(cotes_names, edit_dist_weights = c(d = 1, i = 1, s = 1, t = 1))
d
c <- key_collision_merge(cotes_names)
c
atp_names <- c("Nick Kyrgios", "Jo Tsonga", "Rafa Nadal", "Darmir Dzumurh", "Richard Gasquet", "Roger Federer")
cotes_names <- list.append(d$V1, d$V2, atp_names)
y <- c("Kyrgios, Nick - Tsonga, Jo-Wilfried", "Nadal, Rafael - Dzumhur, Darmir", "Gasquet, Richard - Federer, Roger")
y <- as.data.frame(y)
library(stringr)
y1 <- strsplit(as.character(y$y),' - ')
f <- function(data) {
nCol <- max(vapply(data, length, 0))
data <- lapply(data, function(row) c(row, rep(NA, nCol-length(row))))
data <- matrix(unlist(data), nrow=length(data), ncol=nCol, byrow=TRUE)
data.frame(data, stringsAsFactors=FALSE)
}
y2 <- f(y1)
colnames(y2) <- c("player1", "player2")
y3 <- strsplit(as.character(y2$player1),', ')
d <- data.frame()
y4 <- strsplit(as.character(y2$player2),', ')
for (i in row(y2)) {
d[i,1] <- as.character(paste(y3[[i]][[2]], y3[[i]][[1]]))
d[i,2] <- as.character(paste(y4[[i]][[2]], y4[[i]][[1]]))
}
cotes_names <- list.append(d$V1, d$V2, atp_names)
c <- key_collision_merge(cotes_names)
c
atp_names <- c("Nick Kyrgios", "Jo Tsonga", "Rafa Nadal", "Darmir Dzumurh", "Richard Gasquet", "Roge Federer")
cotes_names <- list.append(d$V1, d$V2, atp_names)
c <- key_collision_merge(cotes_names)
c
c <- key_collision_merge(cotes_names, dict = atp_names)
c
cotes_names <- list.append(d$V1, d$V2)
c <- key_collision_merge(cotes_names, dict = atp_names)
c
x <- c("Acme Pizza, Inc.", "Acme Pizza, Inc.", "ACME PIZZA COMPANY", "acme pizza LLC")
key_collision_merge(x)
key_collision_merge(x, dict = "ACME PIZZA")
key_collision_merge(x, dict = "Jo-Wilfried Tsonga")
x <- c("Jo Wilfried Tsonga", "Jo-WilfriedTsonga")
key_collision_merge(x, dict = "Jo-Wilfried Tsonga")
library("stringdist", lib.loc="~/R/win-library/3.4")
atp_names <- c("Nick Kyrgios", "Jo Tsonga", "Rafa Nadal", "Darmir Dzumurh", "Richard Gasquet", "Roger Federer")
cotes_names <- list.append(d$V1, d$V2)
idx <- amatch(cotes_names, atp_names, maxDist = 5)
print(data.frame(name.from.cotes = cotes_names,
name.from.atp = atp_names[idx] ))
atp_names <- c("Nick Kyrgios", "Jo Wilfried Tsonga", "Rafa Nadal", "Darmir Dzumurh", "Richard Gasquet", "Roger Federer")
cotes_names <- list.append(d$V1, d$V2)
idx <- amatch(cotes_names, atp_names, maxDist = 5)
print(data.frame(name.from.cotes = cotes_names,
name.from.atp = atp_names[idx] ))
View(d)
d$V1 <- match(d$V1, atp_names[idx] )
idx <- amatch(cotes_names, atp_names, maxDist = 9)
name.player <- atp_names[idx]
print(data.frame(name.from.cotes = cotes_names,
name.from.atp = atp_names[idx] ))
idx <- as.data.frame(amatch(cotes_names, atp_names, maxDist = 9))
View(idx)
correspondance <- data.frame(name.from.cotes = cotes_names,
name.from.atp = atp_names[idx] )
atp_names <- c("Nick Kyrgios", "Jo Wilfried Tsonga", "Rafa Nadal", "Darmir Dzumurh", "Richard Gasquet", "Roger Federer")
cotes_names <- list.append(d$V1, d$V2)
idx <- amatch(cotes_names, atp_names, maxDist = 9)
correspondance <- data.frame(name.from.cotes = cotes_names,
name.from.atp = atp_names[idx] )
View(correspondance)
idx <- amatch(cotes_names, atp_names, maxDist = 5)
correspondance <- data.frame(name.from.cotes = cotes_names,
name.from.atp = atp_names[idx] )
View(correspondance)
cotes_names <- list.append(d$V1, d$V2)
View(d)
y <- c("Kyrgios, Nick - Tsonga, Jo-Wilfried", "Nadal, Rafael - Dzumhur, Darmir", "Gasquet, Richard - Federer, Roger")
y <- as.data.frame(y)
library(stringr)
y1 <- strsplit(as.character(y$y),' - ')
f <- function(data) {
nCol <- max(vapply(data, length, 0))
data <- lapply(data, function(row) c(row, rep(NA, nCol-length(row))))
data <- matrix(unlist(data), nrow=length(data), ncol=nCol, byrow=TRUE)
data.frame(data, stringsAsFactors=FALSE)
}
y2 <- f(y1)
colnames(y2) <- c("player1", "player2")
y3 <- strsplit(as.character(y2$player1),', ')
d <- data.frame()
y4 <- strsplit(as.character(y2$player2),', ')
for (i in row(y2)) {
d[i,1] <- as.character(paste(y3[[i]][[2]], y3[[i]][[1]]))
d[i,2] <- as.character(paste(y4[[i]][[2]], y4[[i]][[1]]))
}
library(stringdist)
atp_names <- c("Nick Kyrgios", "Jo Wilfried Tsonga", "Rafa Nadal", "Darmir Dzumurh", "Richard Gasquet", "Roger Federer")
cotes_names <- list.append(d$V1, d$V2)
View(d)
idx <- amatch(cotes_names, atp_names, maxDist = 9)
correspondance <- data.frame(name.from.cotes = cotes_names,
name.from.atp = atp_names[idx] )
View(correspondance)
d$V1 <- gsub(d$V1, replacement = correspondance$name.from.atp)
d$V1 <- gsub(x=d$V1, replacement = correspondance$name.from.atp)
library(data.table)
install.packages("qdapTools")
library(qdapTools)
d$V1 <- lookup(terms = d$V1, key.match = correspondance, key.reassign = correspondance$name.from.atp)
View(d)
d$V2 <- lookup(terms = d$V2, key.match = correspondance, key.reassign = correspondance$name.from.atp)
View(d)
devtools::install_github("durtal/servevolleyR")
install.packages(c("crul", "htmlTable", "htmlwidgets", "listenv", "Rcpp", "sp", "tibble", "urltools"))
library(ggplot2)
library(ggmap)
library(scales)
library(leaflet)
library(plotly)
library(MASS)
library(sp)
library(rgeos)
library(rgdal)
library(shiny)
library(htmlwidgets)
library(webshot)
devtools::install_github("riatelab/mapinsetr")
install.packages("e1071")
install.packages("rpart")
install.packages("nnet")
install.packages("randomForest")
install.packages("caret")
install.packages("kernlab")
install.packages("glmnet")
install.packages("ROCR")
install.packages(c("gbm", "party", "arules", "tree", "klaR", "RWeka", "ipred", "lars", "earth", "CORElearn", "mboost"))
install.packages("rattle")
install.packages("h2o")
install.packages("mice")
install.packages(c("outliers", "jsonlite", "tm", "swirl", "qcc"))
install.packages("RODBC")
install.packages("gmodels")
install.packages("wordcloud")
install.packages("C50")
install.packages("neuralnet")
install.packages("Rcrawler")
pakiety <- c(
"caret", "corrplot", "dismo", "fields", "ggplot2", "gridExtra",
"gstat", "pgirmess", "raster", "rasterVis", "rgdal", "rgeos", "sp"
)
install.packages(pakiety)
library(fmsb)
install.packages("fmsb")
devtools::install_github("MangoTheCat/radarchart")
install.packages(c("magic", "reprex", "RGtk2"))
install.packages("reldist")
install.packages("ENmisc")
library(readxl)     # for reading xlsx files
library(reldist)    # for computing weighted statistics
library(ENmisc)     # for weighted box plots
library(plotly)     # for interactive plots
library(factoextra) # for factor maps
library(FactoMineR) # Principal Component Analysis (PCA)
library(cluster)    # Clustering algorithms (CLARA)
library(class)      # for KNN
if (!file.exists("SCFP2016.xlsx")) {
download.file(
"https://www.federalreserve.gov/econres/files/scfp2016excel.zip",
"SCFP2016.zip")
unzip("scfp2016.zip")
}
df <- read_excel("SCFP2016.xlsx")
# How many survey participants?
nrow(df)
# Combien de ménages l'enquête représente-t-elle?
floor(sum(df$WGT)))
# Combien de ménages l'enquête représente-t-elle?
floor(sum(df$WGT))
# Quelle est la moyenne pondérée du salaire net des ménages?
floor(sum(df$NETWORTH*df$WGT)/sum(df$WGT)))
# Quelle est la moyenne pondérée du salaire net des ménages?
floor(sum(df$NETWORTH*df$WGT)/sum(df$WGT))
# what is the median NW in US?
reldist::wtd.quantile(df$NETWORTH, q=0.5, weight = df$WGT)
# who is the 1%?
reldist::wtd.quantile(df$NETWORTH, q=0.99, weight = df$WGT)
# top 0.1% Ultra-high net worth households
reldist::wtd.quantile(df$NETWORTH, q=0.999, weight = df$WGT)
# filter on ages 30 - 84, and group into 5-year buckets
data <- df[df$AGE >= 30 & df$AGE < 85, ]
ages <- floor(data$AGE/5.0)*5
# plot the weighted box plot
wtd.boxplot(log10(1 + data$NETWORTH) ~ ages, data = data,
weights = data$WGT, main = 'Net Worth by Age',
xlab="Age", ylab="Net Worth (Log10)")
View(data)
# plot the weighted box plot
wtd.boxplot(log10(1 + data$NETWORTH) ~ ages, data = data,
weights = data$WGT, main = 'Net Worth by Age',
xlab="Age", ylab="Net Worth (Log10)")
# normalize assets by total financial and non-financial amounts
# normalize assets by total financial and non-financial amounts
households <- data.frame(
LIQ = df$LIQ/assets,
...
BUS = df$BUS/assets,
OTHNFIN = df$OTHNFIN/assets
# plot the weighted box plot
wtd.boxplot(log10(1 + data$NETWORTH) ~ ages, data = data,
weights = data$WGT, main = 'Net Worth by Age',
xlab="Age", ylab="Net Worth (Log10)")
# filter on ages 30 - 84, and group into 5-year buckets
data <- df[df$AGE >= 30 & df$AGE < 85, ]
ages <- floor(data$AGE/5.0)*5
# plot the weighted box plot
wtd.boxplot(log10(1 + data$NETWORTH) ~ ages, data = data,
weights = data$WGT, main = 'Net Worth by Age',
xlab="Age", ylab="Net Worth (Log10)")
data$WGT
install.packages("RGtk2")
devtools::install_github("benmarwick/rrtools")
devtools::install_github('rstudio/tufte')
install.packages("Zelig")
install.packages("colourpicker")
install.packages("remedy")
devtools::install_github("ThinkR-open/remedy")
install.packages("clipr")
library(gdal)
library(rgdal)
devtools::install_github('yihui/xaringan')
devtools::install_github("mkearney/rmd2jupyter")
install.packages("mlr")
library("knitr", lib.loc="~/R/win-library/3.4")
devtools::install_github("rstudio/bookdown")
install.packages(c("arules", "DBI", "DiagrammeR", "earth", "enc", "httpuv", "mapedit", "NMF", "openssl", "RcppArmadillo", "rmarkdown", "selectr", "sfsmisc", "stplanr", "styler", "tinytex", "truncnorm", "yaml"))
devtools::install_github("ripleyCorr/kdeborder")
install.packages(c("arules", "NMF", "stplanr", "yaml"))
install.packages("addinslist")
addinslist:::addinslistAddin()
install.packages("dichromat")
devtools::install_github("awhstin/awtools")
install.packages("cptcity")
devtools::install_github("road2stat/ggsci")
install.packages("Polychrome")
devtools::install_github("Nowosad/rcartocolor")
setwd("C:/Users/rlx//Desktop/Générateur Rapport CI")
setwd("C:/Users/rlx/Desktop/Générateur Rapport CI")
setwd("C:/Users/rlx/Desktop/Générateur Rapport CI")
install.packages(c("ddalpha", "future", "proxy", "rankdist"))
install.packages(c("cluster", "RStoolbox", "tmap", "tmaptools"))
install.packages(c("callr", "lubridate", "Polychrome"))
shell.exec("http://https://youtu.be/XZAt-_gwvXY?t=10s")
shell.exec("https://youtu.be/XZAt-_gwvXY?t=10s")
install.packages("yarrr")
install.packages(c("ade4", "adehabitatLT", "BH", "bindr", "bindrcpp", "blob", "broom", "callr", "car", "curl", "DBI", "dbplyr", "deldir", "dendextend", "devtools", "digest", "FactoMineR", "fields", "forcats", "gdtools", "geojsonio", "ggthemes", "gstat", "haven", "heatmaply", "hms", "htmlTable", "htmlwidgets", "httpuv", "igraph", "knitr", "LearnBayes", "lme4", "lubridate", "mapproj", "maps", "mapview", "MASS", "mvtnorm", "network", "oce", "officer", "openssl", "osmdata", "packrat", "pillar", "plogr", "psych", "quantreg", "Rcpp", "RcppArmadillo", "RcppEigen", "reprex", "rgdal", "rgl", "rlang", "rmapshaper", "rmarkdown", "RSQLite", "rvg", "scatterplot3d", "selectr", "seriation", "sf", "shadow", "shape", "shinydashboard", "sp", "spam", "spatstat", "spData", "spdep", "stringi", "stringr", "surveillance", "tibble", "tidyr", "tidyselect", "tmap", "tmaptools", "viridis", "viridisLite", "withr", "XLConnect", "XLConnectJars", "XML", "xml2", "xts", "yaml"))
install.packages("iml")
install.packages("knitLatex")
install.packages("knitr")
install.packages("kableExtra")
install.packages(c("sjstats", "wellknown", "smoothr"))
devtools::install_github("ripleyCorr/kdeborder")
install.packages("ggridges")
install.packages(c("gdalUtils", "iml", "ks", "pillar", "sf", "sjlabelled", "sourcetools"))
install.packages(c("Amelia", "base2grob", "BayesFactor", "cartography", "ClusterR", "commonmark", "data.table", "DBI", "ddalpha", "dendextend", "desc", "earth", "FactoMineR", "foreign", "Formula", "future", "future.apply", "gdalUtils", "gdistance", "ggimage", "ggrepel", "ggthemes", "h2o", "hrbrthemes", "httpuv", "kernlab", "ks", "later", "leaflet.extras", "magick", "mapview", "MASS", "Matching", "missMDA", "modelr", "officer", "pbdZMQ", "pillar", "polyclip", "processx", "psych", "R.oo", "RcppArmadillo", "refinr", "reticulate", "rgdal", "rgenoud", "rjson", "robustbase", "sf", "slam", "sourcetools", "stringi", "stringr", "treemapify", "TSP", "yaml"))
install.packages("yaml")
devtools::install_github("imbs-hl/ranger")
install.packages("GSIF")
install.packages(c("ggsci", "MTA"))
updateR(F, T, T, F, T, F, T)
library("installr", lib.loc="~/R/win-library/3.4")
updateR(F, T, T, F, T, F, T)
install.packages(c("automap", "devtools", "cartography", "cluster", "raster", "sf", "sp", "spdep", "tidyverse", "data.table", "magrittr", "FactoMineR", "factoextra", "rgdal", "gstat", "igraph", "sna", "knitr", "latticeExtra", "leaflet", "rasterVis", "RColorBrewer", "viridis", "roxygen2"))
install.packages("splitstackshape")
library(splitstackshape)
library(tidyverse)
x <- readClipboard()
y <- x[21:length(x)]
cvi <- str_sub(x[8], start=8)
nom <- str_sub(x[7], start=5)
y <- as.data.frame(y) %>%
cSplit('y', sep="\t", stripWhite = FALSE) %>%
filter(!str_detect(y_01, 'TOTAL'))
colnames(y) <- as.character(unlist(y[1,]))
y = y[-1, ]
y$CVI <- cvi
y$NomPrenom_RaisonSociale <- nom
colnames(y) <- make.names(colnames(y))
View(y)
y <- y %>%
separate(superficie.encepagée, sep=" ", into = c("HA","AR","CA"), remove = TRUE) %>%
mutate(HA = str_replace_all(HA,"Ha", "")) %>%
mutate(AR = str_replace_all(AR,"Ar", "")) %>%
mutate(CA = str_replace_all(CA,"Ca", "")) %>%
mutate(HA = as.integer(HA)) %>%
mutate(AR = as.integer(AR)) %>%
mutate(CA = as.integer(CA))
View(y)
y$superficie.encepagee <- CVI$HA + CVI$AR/100 + CVI$CA/10000
y$superficie.encepagee <- y$HA + y$AR/100 + y$CA/10000
View(y)
y <- y[,-c(6,7,8)]
View(y)
y <- y[,c(1,2,3,4,5,14,6,7,8,9,10,11,12,13)]
View(y)
write.csv2(y, "cvi.csv", row.names = FALSE)
x <- readClipboard()
y <- x[21:length(x)]
cvi <- str_sub(x[8], start=8)
nom <- str_sub(x[7], start=5)
y <- as.data.frame(y) %>%
cSplit('y', sep="\t", stripWhite = FALSE) %>%
filter(!str_detect(y_01, 'TOTAL'))
colnames(y) <- as.character(unlist(y[1,]))
y = y[-1, ]
y$CVI <- cvi
y$NomPrenom_RaisonSociale <- nom
colnames(y) <- make.names(colnames(y))
y <- y %>%
separate(superficie.encepagée, sep=" ", into = c("HA","AR","CA"), remove = TRUE) %>%
mutate(HA = str_replace_all(HA,"Ha", "")) %>%
mutate(AR = str_replace_all(AR,"Ar", "")) %>%
mutate(CA = str_replace_all(CA,"Ca", "")) %>%
mutate(HA = as.integer(HA)) %>%
mutate(AR = as.integer(AR)) %>%
mutate(CA = as.integer(CA))
y$superficie.encepagee <- y$HA + y$AR/100 + y$CA/10000
y <- y[,-c(6,7,8)]
y <- y[,c(1,2,3,4,5,14,6,7,8,9,10,11,12,13)]
cvi <- read.csv2("cvi.csv")
cvi <- rbind(cvi, y)
write.csv2(cvi, "cvi.csv", row.names = FALSE)
x <- readClipboard()
y <- x[21:length(x)]
cvi <- str_sub(x[8], start=8)
nom <- str_sub(x[7], start=5)
y <- as.data.frame(y) %>%
cSplit('y', sep="\t", stripWhite = FALSE) %>%
filter(!str_detect(y_01, 'TOTAL'))
colnames(y) <- as.character(unlist(y[1,]))
y = y[-1, ]
y$CVI <- cvi
y$NomPrenom_RaisonSociale <- nom
colnames(y) <- make.names(colnames(y))
y <- y %>%
separate(superficie.encepagée, sep=" ", into = c("HA","AR","CA"), remove = TRUE) %>%
mutate(HA = str_replace_all(HA,"Ha", "")) %>%
mutate(AR = str_replace_all(AR,"Ar", "")) %>%
mutate(CA = str_replace_all(CA,"Ca", "")) %>%
mutate(HA = as.integer(HA)) %>%
mutate(AR = as.integer(AR)) %>%
mutate(CA = as.integer(CA))
y$superficie.encepagee <- y$HA + y$AR/100 + y$CA/10000
y <- y[,-c(6,7,8)]
y <- y[,c(1,2,3,4,5,14,6,7,8,9,10,11,12,13)]
cvi <- read.csv2("cvi.csv")
cvi <- rbind(cvi, y)
write.csv2(cvi, "cvi.csv", row.names = FALSE)
x <- readClipboard()
y <- x[21:length(x)]
cvi <- str_sub(x[8], start=8)
nom <- str_sub(x[7], start=5)
y <- as.data.frame(y) %>%
cSplit('y', sep="\t", stripWhite = FALSE) %>%
filter(!str_detect(y_01, 'TOTAL'))
colnames(y) <- as.character(unlist(y[1,]))
y = y[-1, ]
y$CVI <- cvi
y$NomPrenom_RaisonSociale <- nom
colnames(y) <- make.names(colnames(y))
y <- y %>%
separate(superficie.encepagée, sep=" ", into = c("HA","AR","CA"), remove = TRUE) %>%
mutate(HA = str_replace_all(HA,"Ha", "")) %>%
mutate(AR = str_replace_all(AR,"Ar", "")) %>%
mutate(CA = str_replace_all(CA,"Ca", "")) %>%
mutate(HA = as.integer(HA)) %>%
mutate(AR = as.integer(AR)) %>%
mutate(CA = as.integer(CA))
y$superficie.encepagee <- y$HA + y$AR/100 + y$CA/10000
y <- y[,-c(6,7,8)]
y <- y[,c(1,2,3,4,5,14,6,7,8,9,10,11,12,13)]
cvi <- read.csv2("cvi.csv")
cvi <- rbind(cvi, y)
write.csv2(cvi, "cvi.csv", row.names = FALSE)
x <- readClipboard()
y <- x[21:length(x)]
cvi <- str_sub(x[8], start=8)
nom <- str_sub(x[7], start=5)
y <- as.data.frame(y) %>%
cSplit('y', sep="\t", stripWhite = FALSE) %>%
filter(!str_detect(y_01, 'TOTAL'))
colnames(y) <- as.character(unlist(y[1,]))
y = y[-1, ]
y$CVI <- cvi
y$NomPrenom_RaisonSociale <- nom
colnames(y) <- make.names(colnames(y))
y <- y %>%
separate(superficie.encepagée, sep=" ", into = c("HA","AR","CA"), remove = TRUE) %>%
mutate(HA = str_replace_all(HA,"Ha", "")) %>%
mutate(AR = str_replace_all(AR,"Ar", "")) %>%
mutate(CA = str_replace_all(CA,"Ca", "")) %>%
mutate(HA = as.integer(HA)) %>%
mutate(AR = as.integer(AR)) %>%
mutate(CA = as.integer(CA))
y$superficie.encepagee <- y$HA + y$AR/100 + y$CA/10000
y <- y[,-c(6,7,8)]
y <- y[,c(1,2,3,4,5,14,6,7,8,9,10,11,12,13)]
cvi <- read.csv2("cvi.csv")
cvi <- rbind(cvi, y)
write.csv2(cvi, "cvi.csv", row.names = FALSE)
x <- readClipboard()
y <- x[21:length(x)]
cvi <- str_sub(x[8], start=8)
nom <- str_sub(x[7], start=5)
y <- as.data.frame(y) %>%
cSplit('y', sep="\t", stripWhite = FALSE) %>%
filter(!str_detect(y_01, 'TOTAL'))
colnames(y) <- as.character(unlist(y[1,]))
y = y[-1, ]
y$CVI <- cvi
y$NomPrenom_RaisonSociale <- nom
colnames(y) <- make.names(colnames(y))
y <- y %>%
separate(superficie.encepagée, sep=" ", into = c("HA","AR","CA"), remove = TRUE) %>%
mutate(HA = str_replace_all(HA,"Ha", "")) %>%
mutate(AR = str_replace_all(AR,"Ar", "")) %>%
mutate(CA = str_replace_all(CA,"Ca", "")) %>%
mutate(HA = as.integer(HA)) %>%
mutate(AR = as.integer(AR)) %>%
mutate(CA = as.integer(CA))
y$superficie.encepagee <- y$HA + y$AR/100 + y$CA/10000
y <- y[,-c(6,7,8)]
y <- y[,c(1,2,3,4,5,14,6,7,8,9,10,11,12,13)]
cvi <- read.csv2("cvi.csv")
cvi <- rbind(cvi, y)
write.csv2(cvi, "cvi.csv", row.names = FALSE)
install.packages("utf8")
install.packages("pillar")
install.packages(c("caret", "mlr"))
install.packages(c("purrr", "quantreg"))
library("devtools", lib.loc="~/R/win-library/3.5")
devtools::install_github("rCarto/osrm")
install.packages("rosm")
install.packages(c("rlang", "storr"))
install.packages("DataExplorer")
install.packages(c("leaflet", "RcppRoll", "sp", "statnet.common", "stringdist"))
install.packages(c("dendextend", "FactoMineR", "ggiraph", "iml", "ks", "manipulateWidget", "munsell", "officer", "rmarkdown", "rvg", "spatstat.data", "stringi", "zoo"))
install.packages(c("dendextend", "FactoMineR", "iml", "ks"))
install.packages(c("dendextend", "FactoMineR", "iml", "ks"))
install.packages("formatR", repos = "http://cran.rstudio.com")
devtools::install_github("datalorax/slidex")
install.packages(c("highr", "munsell", "recipes", "rmarkdown", "spData", "stringi", "units", "zoo"))
install.packages(c("cartography", "gmodels"))
my_packages <- c("tidyverse", "broom", "coefplot", "cowplot",
"gapminder", "GGally", "ggrepel", "ggridges", "gridExtra",
"here", "interplot", "margins", "maps", "mapproj",
"mapdata", "MASS", "quantreg", "rlang", "scales",
"survey", "srvyr", "viridis", "viridisLite", "devtools")
install.packages(my_packages, repos = "http://cran.rstudio.com")
install.packages(c("gtools", "ParamHelpers"))
install.packages(c("crul", "dygraphs", "ggraph", "git2r"))
install.packages("sabre")
library(igraph)
library(tidyverse)
setwd("C:/Users/rlx/Desktop/papigrafistat")
citations <- read.csv2("citations.csv", header = TRUE)
edgelist <- citations[,c("Source","Target")]
edgelist<-edgelist[!(is.na(edgelist$Source) | edgelist$Source==""), ]
write.csv2(edgelist, "edgelist.csv", row.names = FALSE)
edgelist <- as.matrix(edgelist)
g <- graph_from_edgelist(edgelist, directed = TRUE)
write.graph(g, file = "graph.net", format = "pajek")
V(g)$degree <- degree(g, mode = "out")                        # Degree centrality
centrality  <- data.frame(degree      = V(g)$degree,
name = V(g)$name)
centrality$id <- row.names(centrality)
View(centrality)
library("RJSONIO")
install.packages("RJSONIO")
library("RJSONIO")
library("cluster")
library("igraph")
setwd("~/dataBinch")
binches <- fromJSON("/data/binches.json")
binches <- fromJSON("data/binches.json")
binches <- lapply(binches, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
binches <- do.call("rbind", binches)
binches <- as.data.frame(binches)
binchUnique <- binches[,4:11]
binchUnique <- unique(binchUnique, incomparables = FALSE)
binchDist <- binchUnique[,-1]
binchDist$ABV <- as.numeric(as.character(sub("," , ".", binchDist$ABV)))
binchDist$IBU <- as.numeric(as.character(sub("," , ".", binchDist$IBU)))
View(binchDist)
binchDist$SRM <- as.numeric(as.character(sub("," , ".", binchDist$SRM)))
dist <- daisy(binchDist, metric = "gower")
dist <- as.matrix(dist)
rownames(dist) <- binchUnique[,1]
colnames(dist) <- binchUnique[,1]
json <- toJSON(dist, pretty = TRUE)
g <- graph.adjacency(dist, mode = "directed", weighted = TRUE)
e <- cbind( get.edgelist(g) , round( E(g)$weight, 3 ))
e <- as.data.frame(e)
colnames(e)[1]<-"Source"
colnames(e)[2]<-"Target"
colnames(e)[3]<-"Weight"
write.csv(e, file="rowdist.csv", row.names = FALSE)
